swagger: "2.0"
info:
  description: "This is a sample store server"
  version: "1.0.0"
  title: "Swagger"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "bogdanov.denis.1991@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8181"
basePath: "/v2"
tags:
- name: "item"
  description: "items to buy"
- name: "basket"
  description: "items in the basket"
- name: "order"
  description: "user orders "
schemes:
- "http"
paths:
  /items:
    get:
      tags:
      - "item"
      summary: "Finds all items"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "itemsView"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Item"
        "400":
          description: "Invalid status value"
  /orders:
    get:
      tags:
      - "order"
      summary: "Finds all orders"
      operationId: "orderView"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        "400":
          description: "Invalid status value"
  /basket:
    get:
      tags:
      - "basket"
      summary: "Finds all items in basket"
      operationId: "basket"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Basket"
        "400":
          description: "Invalid status value"
  /orders/add:
    post:
      tags:
      - "order"
      summary: "creating a new order "
      description: ""
      operationId: "addOrder"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Order"
        "400":
          description: "Invalid status value"
  /basket/add/{id}:
    post:
      tags:
      - "basket"
      summary: "adding items to basket"
      operationId: "addBasket"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the item that needs to be adding"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "Entity added"
        "404":
          description: "Item not found"
  /basket/delete/{id}:
    delete:
      tags:
      - "basket"
      summary: "Delete item from basket by ID"
      operationId: "delBasket"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the item that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "Entity deleted"
        "404":
          description: "Item not found"
definitions:
  Basket:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "apple"
      quantity:
        type: "integer"
        format: "int32"
      total:
        type: "number"
    xml:
      name: "User"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      orderPrise:
        type: "number"
      timestamp:
        type: "string"
      basketView: 
        type: "array"
        items: 
          $ref: "#/definitions/Basket"
    xml:
      name: "Order"
  Item:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "apple"
      price:
        type: "string"
        example: "2.50$"
    xml:
      name: "item"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"